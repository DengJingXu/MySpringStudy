<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
        <!--获取数据库配置文件-->
    <context:property-placeholder location="classpath*:db.properties"></context:property-placeholder>

    <!--配置数据源，用druid连接池-->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!--spring整合mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--可用 <property name="configLocation"></property> 直接引入mybatis的配置文件，或用下面一些代替-->
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.dengjingxu.domain"></property>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <property name="configLocation" value="classpath:mybatis.xml"></property>
    </bean>

    <!--扫描mybatis的接口与映射配置文件,将mapper生成代理对象bean存入spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 这边不能使用ref="sqlSessionFactory"原因是因为上面加载配置文件导致这边引用会报错 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 扫描包路径,如果需要扫描多个包中间用半角逗号隔开 -->
        <property name="basePackage" value="com.dengjingxu.dao"/>
    </bean>

    <!--spring声明式事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--事务的通知-->
    <tx:advice id="txManager" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
                propagation 事务传播机制 REQUIRED：必须（默认） SUPPORTS:支持 isolation 事务隔离等级
                timeout 事务超时时间，默认-1，不准超时 read-only 事务是否为只读，默认false rollback-for
                设置能触发回滚的异常类型，默认 RuntimeException，添加可用逗号隔开 no-rollback-for
                设置不会触发事务回滚的异常类型

                注意：这里name指的是方法名
            -->
            <tx:method name="find*" propagation="SUPPORTS" timeout="-1"
                       read-only="false" rollback-for="Exception,RuntimeException"
                       no-rollback-for="" isolation="DEFAULT" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <!--事务的aop-->
    <aop:config>
        <aop:pointcut id="pt" expression="execution(* com.dengjingxu.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txManager" pointcut-ref="pt"></aop:advisor>
    </aop:config>
</beans>